from flask import Flask, jsonify, Response
from concurrent.futures import ThreadPoolExecutor
import threading
from scraper.zara_scraper import ZaraApiScraper

app = Flask(__name__)

SEARCH_CONFIG = {
    "kid": [
        # Ni√±a
        "ropa ni√±a", "vestidos ni√±a", "camisetas ni√±a", "pantalones ni√±a", "faldas ni√±a", 
        "leggings ni√±a", "monos ni√±a", "abrigos ni√±a", "chaquetas ni√±a", "sudaderas ni√±a",
        # Ni√±o
        "ropa ni√±o", "camisas ni√±o", "camisetas ni√±o", "pantalones ni√±o", "bermudas ni√±o", 
        "sudaderas ni√±o", "abrigos ni√±o", "chaquetas ni√±o", "jeans ni√±o",
        # Beb√© (unisex, ni√±o y ni√±a)
        "ropa beb√©", "conjuntos beb√©", "bodys beb√©", "pijamas beb√©", "petos beb√©", 
        "abrigos beb√©", "chaquetas beb√©",
        # Calzado y Accesorios generales
        "calzado infantil", "zapatos ni√±a", "zapatos ni√±o", "zapatillas ni√±o", "zapatillas ni√±a", 
        "botas ni√±o", "botas ni√±a", "sandalias ni√±o", "sandalias ni√±a", "patucos beb√©",
        "accesorios infantil", "gorros ni√±o", "gorros ni√±a", "calcetines ni√±o", "calcetines ni√±a"
    ],
    "woman": [
        # Partes de arriba
        "mujer tops", "mujer camisetas", "mujer bodies", "mujer camisas", "mujer blusas", 
        "mujer jers√©is", "mujer c√°rdigans", "mujer sudaderas", "mujer chalecos",
        # Prendas de abrigo
        "mujer abrigos", "mujer gabardinas", "mujer parkas", "mujer chaquetas", "mujer cazadoras", 
        "mujer blazers",
        # Partes de abajo
        "mujer pantalones", "mujer jeans", "mujer vaqueros", "mujer faldas", "mujer pantalones cortos", 
        "mujer shorts", "mujer leggings",
        # Prendas completas
        "mujer vestidos", "mujer monos",
        # Lencer√≠a y Pijamas
        "mujer lencer√≠a", "mujer sujetadores", "mujer braguitas", "mujer pijamas", "mujer batas","mujer ropa interior",
        # Ropa de ba√±o
        "mujer bikinis", "mujer ba√±adores",
        # Calzado
        "mujer zapatos de tac√≥n", "mujer zapatos planos", "mujer sandalias", "mujer zapatillas", 
        "mujer deportivas", "mujer botas", "mujer botines", "mujer mocasines",
        # Accesorios
        "mujer accesorios", "mujer bolsos", "mujer mochilas", "mujer cinturones", "mujer carteras", 
        "mujer monederos", "mujer gorros", "mujer sombreros", "mujer bufandas", "mujer pa√±uelos", 
        "mujer fulares", "mujer gafas de sol", "mujer joyas", "mujer bisuter√≠a",
        # Especiales
        "mujer ropa deportiva"
    ],
    "man": [
        # Partes de arriba
        "hombre camisas", "hombre camisetas", "hombre polos", "hombre jers√©is", "hombre c√°rdigans", 
        "hombre sudaderas", "hombre chalecos",
        # Prendas de abrigo
        "hombre abrigos", "hombre gabardinas", "hombre parkas", "hombre chaquetas", "hombre cazadoras", 
        "hombre bombers", "hombre blazers", "hombre americanas",
        # Partes de abajo
        "hombre pantalones", "hombre pantalones chinos", "hombre pantalones cargo", "hombre pantalones de vestir", 
        "hombre jeans", "hombre vaqueros", "hombre bermudas",
        # Prendas completas
        "hombre trajes", "hombre monos",
        # Ropa interior y de estar por casa
        "hombre ropa interior", "hombre boxers", "hombre calcetines", "hombre pijamas",
        # Ropa de ba√±o
        "hombre ba√±adores",
        # Calzado
        "hombre zapatos", "hombre zapatillas", "hombre deportivas", "hombre botas", "hombre botines", 
        "hombre mocasines", "hombre n√°uticos", "hombre sandalias",
        # Accesorios
        "hombre accesorios", "hombre bolsos", "hombre mochilas", "hombre ri√±oneras", "hombre cinturones", 
        "hombre carteras", "hombre gorros", "hombre gorras", "hombre sombreros", "hombre bufandas", 
        "hombre pa√±uelos", "hombre gafas de sol", "hombre corbatas",
        # Especiales
        "hombre ropa deportiva"
    ]
}


def run_scrape_for_term(term: str, section: str, language: str, marca: str):
    """
    Funci√≥n auxiliar simplificada. Ya no necesita gestionar IDs compartidos.
    """
    print(f"üöÄ Iniciando scraping para: '{term}' en la secci√≥n '{section.upper()}' (Lang: {language})")
    try:
        if(marca == "zara"):
            scraper = ZaraApiScraper(query=term, section=section.upper(), language=language, country_code='ES')
            products = scraper.scrape()
        
        if products:
            print(f"‚úÖ Finalizado: '{term}'. Encontrados {len(products)} productos.")
        else:
            print(f"‚ö™Ô∏è Finalizado: '{term}'. No se encontraron productos.")
        return products
    except Exception as e:
        print(f"‚ùå Error en el scraping de '{term}': {e}")
        return []

def _merge_product_lists(list_of_lists):
    """
    Funci√≥n auxiliar para fusionar listas de productos de diferentes hilos,
    evitando duplicados y actualizando con la informaci√≥n m√°s completa.
    """
    final_products = {}
    
    for product_list in list_of_lists:
        for product in product_list:
            product_id = str(product.productId)
            if product_id not in final_products:
                final_products[product_id] = product
            else:
                existing_product = final_products[product_id]
                if (hasattr(existing_product, 'imageUrl') and existing_product.imageUrl == "NO_IMAGE" and 
                    hasattr(product, 'imageUrl') and product.imageUrl != "NO_IMAGE"):
                    existing_product.imageUrl = product.imageUrl

    
    return list(final_products.values())


def scrape_section_task(section: str, language: str, marca: str):
    """
    La tarea de scraping completa. Ahora fusiona los resultados al final.
    """
    print(f"\n--- Iniciando tarea de scraping para la secci√≥n: {section.upper()} (Lang: {language}, Marca: {marca}) ---")
    search_terms = SEARCH_CONFIG.get(section, [])
    if not search_terms:
        print(f"Secci√≥n '{section}' no encontrada. Abortando.")
        return []
    all_results_from_threads = []
    with ThreadPoolExecutor(max_workers=5) as executor:
        futures = [executor.submit(run_scrape_for_term, term, section, language, marca) for term in search_terms]
        for future in futures:
            all_results_from_threads.append(future.result())
    print("\n--- Fusionando resultados de todos los hilos... ---")
    total_productos = _merge_product_lists(all_results_from_threads)
    print(f"--- Tarea de scraping para '{section.upper()}' completada. Total de productos √∫nicos encontrados: {len(total_productos)} ---")
    return total_productos

@app.route('/api/<marca>/products/scrape/<section>/<language>', methods=['POST'])
def trigger_scrape(marca: str, section: str, language: str):
    section = section.lower()
    language = language.lower()
    marca = marca.lower()
    
    if section not in SEARCH_CONFIG:
        return jsonify({"error": "Secci√≥n no v√°lida. Usar 'kid', 'woman' o 'man'."}), 400

    print(f"\nRecibida petici√≥n para iniciar scraping: Secci√≥n='{section}', Idioma='{language}', Marca='{marca}'")
    productos = scrape_section_task(section, language, marca)
    # Convierte los objetos Product a diccionarios si es necesario
    productos_dict = [p.__dict__ if hasattr(p, '__dict__') else p for p in productos]
    return jsonify(productos_dict), 200

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=5000, debug=True, use_reloader=False)